{"version":3,"sources":["../src/loader.js"],"names":[],"mappings":"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","file":"loader.js","sourcesContent":["let util = require('util');\nlet assume = require('assume');\nlet debug = require('debug')('taskcluster:loader');\nlet Promise = require('promise');\nlet _ = require('lodash');\nlet TopoSort = require('topo-sort');\n\n\n// see babel issue 2215\nfunction includes(a, v) {\n  if (a.indexOf(v) === -1) {\n    return false;\n  }\n  return true;\n}\n\n\n/** Validate component definition */\nfunction validateComponent(def, name) {\n  let e = \"Invalid component definition: \" + name;\n  // Check that it's an object\n  if (typeof(def) !== 'object' && def !== null && def !== undefined) {\n    throw new Error(e + ' must be an object, null or undefined');\n  }\n  // Check that is object has a setup function\n  if (!(def.setup instanceof Function)) {\n    throw new Error(e + ' is missing setup function');\n  }\n  // If requires is defined, then we check that it's an array of strings\n  if (def.requires) {\n    if (!(def.requires instanceof Array)) {\n      throw new Error(e + ' if present, requires must be array');\n    }\n    // Check that all entries in def.requires are strings\n    if (!def.requires.every(entry => typeof(entry) === 'string')) {\n      throw new Error(e + ' all items in requires must be strings');\n    }\n  }\n}\n\n/**\n * Render componentDirectory to dot format for graphviz given a\n * topologically sorted list of components\n */\nfunction renderGraph(componentDirectory, sortedComponents) {\n  let dot = [\n    '// This graph shows all dependencies for this loader.',\n    '// You might find http://www.webgraphviz.com/ useful!',\n    '',\n    'digraph G {',\n  ];\n\n  for (let component of sortedComponents) {\n    dot.push(util.format('  \"%s\"', component));\n    let def = componentDirectory[component];\n    for (let dep of def.requires || []) {\n      dot.push(util.format('  \"%s\" -> \"%s\" [dir=back]', component, dep));\n    }\n  }\n  dot.push('}');\n\n  return dot.join('\\n');\n}\n\n/*\n * Construct a component loader function.\n *\n * The `componentDirectory` is an object mapping from component names to\n * component loaders as follows:\n * ```js\n * let load = loader({\n *   // Component loader that always returns 'test'\n *   profile: {\n *     setup: () => 'test'\n *   },\n *\n *   // Component loader that requires profile as input to the setup function\n *   config: {\n *     requires: ['profile'],\n *     setup: (options) => {\n *       return base.config({profile: options.profile});\n *     }\n *   },\n *\n *   // Component loader that loads asynchronously\n *   requestedValue: {\n *     requires: ['config'],\n *     setup: async (options) => {\n *       let res = await request.get(config.some_url).get().end();\n *       return res.body;\n *     }\n *   },\n *\n *   // Component loader that requires more than one component\n *   server: {\n *     requires: ['config', 'requestedValue'],\n *     setup: (options) => {\n *       return server.startListening({\n *         config: options.config,\n *         input: options.requestedValues,\n *       });\n *     }\n *   }\n * });\n * ```\n * With this `load` function you can load the server using:\n * ```js\n * let server = await load('server');\n * ```\n * Naturally, you can also load config `await load('config');` which is useful\n * for testing.\n *\n * Sometimes it's not convenient to hard code constant values into the component\n * directory, in the example above someone might want to load the\n * components with a different profile. Instead you can specify \"profile\" as\n * a `virtualComponents`, then it must be provided as an options when loading.\n *\n * ```js\n * let load = loader({\n *   // Component loader that requires profile as input to the setup function\n *   config: {\n *     requires: ['profile'],\n *     setup: (options) => {\n *       return base.config({profile: options.profile});\n *     }\n *   }\n * }, ['profile']);\n * ```\n *\n * Then you'll be able to load config as:\n * ```js\n * let config = await load('config', {profile: 'test'});\n * ```\n */\nfunction loader (componentDirectory, virtualComponents = []) {\n  assume(componentDirectory).is.an('object');\n  assume(virtualComponents).is.an('array');\n  assume(_.intersection(\n    _.keys(componentDirectory), virtualComponents)\n  ).has.length(0);\n  componentDirectory = _.clone(componentDirectory);\n\n  // Check for undefined components\n  _.forEach(componentDirectory, (def, name) => {\n    validateComponent(def, name);\n    for(let dep of def.requires || []) {\n      if (!componentDirectory[dep] && !includes(virtualComponents, dep)) {\n        throw new Error('Cannot require undefined component: ' + dep);\n      }\n    }\n  });\n\n  // Do topological sort to check for cycles\n  let tsort = new TopoSort();\n  _.forEach(componentDirectory, (def, name) => {\n    tsort.add(name, def.requires || []);\n  });\n  for (let name of virtualComponents) {\n    tsort.add(name, []);\n  }\n  let topoSorted = tsort.sort();\n\n  // Add graphviz target, if it doesn't exist, we'll just render it as string\n  if (componentDirectory.graphviz || includes(virtualComponents, 'graphviz')) {\n    throw new Error('graphviz is reserved for an internal component');\n  }\n  componentDirectory.graphviz = {\n    setup: () => renderGraph(componentDirectory, topoSorted)\n  };\n\n  return function(target, options = {}) {\n    options = _.clone(options);\n    assume(target).is.a('string');\n    // Check that all virtual components are defined\n    assume(options).is.an('object');\n    for (let vComp of virtualComponents) {\n      assume(options[vComp]).exists();\n    }\n\n    // Keep state of loaded components, make the virtual ones immediately loaded\n    let loaded = {};\n    _.forEach(options, (comp, key) => {\n      loaded[key] = Promise.resolve(comp);\n    });\n\n    // Load a component\n    function load(target) {\n      if (!loaded[target]) {\n        var def = componentDirectory[target];\n        // Initialize component, this won't cause an infinite loop because\n        // we've already check that the componentDirectory is a DAG\n        let requires = def.requires || [];\n        return loaded[target] = Promise.all(requires.map(load)).then(deps => {\n          let ctx = {};\n          for(let i = 0; i < deps.length; i++) {\n            ctx[def.requires[i]] = deps[i];\n          }\n          return def.setup.call(null, ctx);\n        });\n      }\n      return loaded[target];\n    };\n\n    return load(target);\n  };\n};\n\n// Export loader\nmodule.exports = loader;\n"]}